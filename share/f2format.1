.\" Man page generated from reStructuredText.
.
.TH F2FORMAT 1 "April 02, 2021" "v0.8.7rc1" ""
.SH NAME
f2format \- back-port compiler for Python 3.6 f-string literals
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
f2format [\fIoptions\fP] <\fIpython source files and folders\fP> ...
.SH DESCRIPTION
.sp
Since PEP 498, Python introduced \fIf\-string\fP literal in version __3.6__. Though
released ever since December 23, 2016, Python 3.6 is still not widely used as
expected. For those who are now used to \fIf\-string\fP, \fBf2format\fP provides an
intelligent, yet imperfect, solution of a \fBbackport compiler\fP by converting
\fIf\-string*s to \(ga\(gastr.format\(ga\(ga literals, which guarantees you to always write
*f\-string\fP in Python 3.6 flavour then compile for compatibility later.
.sp
\fBf2format\fP functions by tokenising and parsing Python code into multiple
abstract syntax trees (AST), through which it shall synthesise and extract
expressions from \fIf\-string\fP literals, and then reassemble the original string
using \fBstr.format\fP method. Besides \fBconversion\fP and \fBformat specification\fP,
\fBf2format\fP also considered and resolved \fBstring concatenation\fP\&. Also, it always
tries to maintain the original layout of source code, and accuracy of syntax.
.sp
This man page mainly introduces the CLI options of the \fBf2format\fP program.
You can also checkout the online documentation at
\fI\%https://bpc\-f2format.readthedocs.io/\fP for more details.
.SH OPTIONS
.SS positional arguments
.INDENT 0.0
.TP
.B SOURCE
Python source files and directories to be converted
.UNINDENT
.SS optional arguments
.INDENT 0.0
.TP
.B \-h\fP,\fB  \-\-help
show this help message and exit
.TP
.B \-V\fP,\fB  \-\-version
show program\(aqs version number and exit
.TP
.B \-q\fP,\fB  \-\-quiet
run in quiet mode
.UNINDENT
.INDENT 0.0
.TP
.B \-C \fIN\fP, \-\-concurrency \fIN\fP
the number of concurrent processes for conversion
.UNINDENT
.INDENT 0.0
.TP
.B \-\-dry\-run
list the files to be converted without actually performing conversion and archiving
.UNINDENT
.INDENT 0.0
.TP
.B \-s \fI[FILE]\fP, \-\-simple \fI[FILE]\fP
this option tells the program to operate in "simple mode"; if a file name is provided, the program will convert
the file but print conversion result to standard output instead of overwriting the file; if no file names are
provided, read code for conversion from standard input and print conversion result to standard output; in
"simple mode", no file names shall be provided via positional arguments
.UNINDENT
.SS archive options
.sp
backup original files in case there\(aqre any issues
.INDENT 0.0
.TP
.BI \-n\fB a\fR,\fB \ \-\-no\-archive
do not archive original files
.UNINDENT
.INDENT 0.0
.TP
.B \-k \fIPATH\fP, \-\-archive\-path \fIPATH\fP
path to archive original files
.TP
.B \-r \fIARCHIVE_FILE\fP, \-\-recover \fIARCHIVE_FILE\fP
recover files from a given archive file
.UNINDENT
.sp
\-r2                     remove the archive file after recovery
\-r3                     remove the archive file after recovery, and remove the archive directory if it becomes empty
.SS convert options
.sp
conversion configuration
.INDENT 0.0
.TP
.B \-vs \fIVERSION\fP, \-\-vf \fIVERSION\fP, \-\-source\-version \fIVERSION\fP, \-\-from\-version \fIVERSION\fP
parse source code as this Python version
.TP
.B \-l \fILINESEP\fP, \-\-linesep \fILINESEP\fP
line separator (\fBLF\fP, \fBCRLF\fP, \fBCR\fP) to read source files
.TP
.B \-t \fIINDENT\fP, \-\-indentation \fIINDENT\fP
code indentation style, specify an integer for the number of spaces, or \fB\(aqt\(aq\fP/\fB\(aqtab\(aq\fP for tabs
.UNINDENT
.sp
\-n8, \-\-no\-pep8          do not make code insertion \fBPEP 8\fP compliant
.SH ENVIRONMENT
.sp
\fBf2format\fP currently supports three environment variables.
.INDENT 0.0
.TP
.B F2FORMAT_QUIET
run in quiet mode
.TP
.B F2FORMAT_CONCURRENCY
the number of concurrent processes for conversion
.TP
.B F2FORMAT_DO_ARCHIVE
whether to perform archiving
.TP
.B F2FORMAT_ARCHIVE_PATH
path to archive original files
.TP
.B F2FORMAT_SOURCE_VERSION
parse source code as this Python version
.TP
.B F2FORMAT_LINESEP
line separator to read source files
.TP
.B F2FORMAT_INDENTATION
code indentation style
.TP
.B F2FORMAT_PEP8
whether to make code insertion \fBPEP 8\fP compliant
.UNINDENT
.SH SEE ALSO
.sp
pybpc(1), poseur(1), walrus(1), vermin(1)
.SH AUTHOR
Jarry Shaw, a newbie programmer, is the author, owner and maintainer
of f2format. Please contact me at jarryshaw@icloud.com.
.SH COPYRIGHT
f2format is licensed under the Apache Software License.
.\" Generated by docutils manpage writer.
.
